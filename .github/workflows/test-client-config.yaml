name: Test Client Config Helper

on:
  push:
    branches:
      - master
    paths:
      - 'helpers/client-config/**'
      - '.github/workflows/test-client-config.yaml'
  pull_request:
    paths:
      - 'helpers/client-config/**'
      - '.github/workflows/test-client-config.yaml'
  workflow_dispatch:

jobs:
  test-git-defaults:
    name: Test Git Source with Defaults
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test git source with defaults
        uses: ./helpers/client-config
        id: test_git_defaults
        with:
          client_source: git

      - name: Verify git outputs
        run: |
          echo "Testing git source with defaults..."

          # Test hive outputs
          echo "Hive repo: ${{ steps.test_git_defaults.outputs.hive_repo }}"
          echo "Hive tag: ${{ steps.test_git_defaults.outputs.hive_tag }}"
          [[ "${{ steps.test_git_defaults.outputs.hive_repo }}" == "ethereum/hive" ]] || exit 1
          [[ "${{ steps.test_git_defaults.outputs.hive_tag }}" == "master" ]] || exit 1

          # Test geth outputs
          echo "Geth repo: ${{ steps.test_git_defaults.outputs.geth_repo }}"
          echo "Geth tag: ${{ steps.test_git_defaults.outputs.geth_tag }}"
          [[ "${{ steps.test_git_defaults.outputs.geth_repo }}" == "ethereum/go-ethereum" ]] || exit 1
          [[ "${{ steps.test_git_defaults.outputs.geth_tag }}" == "master" ]] || exit 1

          # Test besu outputs
          echo "Besu repo: ${{ steps.test_git_defaults.outputs.besu_repo }}"
          echo "Besu tag: ${{ steps.test_git_defaults.outputs.besu_tag }}"
          [[ "${{ steps.test_git_defaults.outputs.besu_repo }}" == "hyperledger/besu" ]] || exit 1
          [[ "${{ steps.test_git_defaults.outputs.besu_tag }}" == "main" ]] || exit 1

          # Test reth outputs
          echo "Reth repo: ${{ steps.test_git_defaults.outputs.reth_repo }}"
          echo "Reth tag: ${{ steps.test_git_defaults.outputs.reth_tag }}"
          [[ "${{ steps.test_git_defaults.outputs.reth_repo }}" == "paradigmxyz/reth" ]] || exit 1
          [[ "${{ steps.test_git_defaults.outputs.reth_tag }}" == "main" ]] || exit 1

          echo "✅ Git defaults test passed"

  test-docker-defaults:
    name: Test Docker Source with Defaults
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test docker source with defaults
        uses: ./helpers/client-config
        id: test_docker_defaults
        with:
          client_source: docker

      - name: Verify docker outputs
        run: |
          echo "Testing docker source with defaults..."

          # Test geth docker outputs
          echo "Geth docker registry: ${{ steps.test_docker_defaults.outputs.geth_docker_registry }}"
          echo "Geth docker tag: ${{ steps.test_docker_defaults.outputs.geth_docker_tag }}"
          [[ "${{ steps.test_docker_defaults.outputs.geth_docker_registry }}" == "docker.ethquokkaops.io/dh/ethpandaops/geth" ]] || exit 1
          [[ "${{ steps.test_docker_defaults.outputs.geth_docker_tag }}" == "master" ]] || exit 1

          # Test besu docker outputs
          echo "Besu docker registry: ${{ steps.test_docker_defaults.outputs.besu_docker_registry }}"
          echo "Besu docker tag: ${{ steps.test_docker_defaults.outputs.besu_docker_tag }}"
          [[ "${{ steps.test_docker_defaults.outputs.besu_docker_registry }}" == "docker.ethquokkaops.io/dh/ethpandaops/besu" ]] || exit 1
          [[ "${{ steps.test_docker_defaults.outputs.besu_docker_tag }}" == "main" ]] || exit 1

          echo "✅ Docker defaults test passed"

  test-custom-git-versions:
    name: Test Custom Git Versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test custom git versions
        uses: ./helpers/client-config
        id: test_custom_git
        with:
          client_source: git
          client_repos: |
            {
              "geth": "ethereum/go-ethereum@v1.13.0",
              "besu": "hyperledger/besu@23.7.0",
              "reth": "paradigmxyz/reth@v0.1.0"
            }
          hive_version: "ethereum/hive@v1.10.0"

      - name: Verify custom git outputs
        run: |
          echo "Testing custom git versions..."

          # Test custom hive version
          echo "Hive repo: ${{ steps.test_custom_git.outputs.hive_repo }}"
          echo "Hive tag: ${{ steps.test_custom_git.outputs.hive_tag }}"
          [[ "${{ steps.test_custom_git.outputs.hive_repo }}" == "ethereum/hive" ]] || exit 1
          [[ "${{ steps.test_custom_git.outputs.hive_tag }}" == "v1.10.0" ]] || exit 1

          # Test custom geth version
          echo "Geth repo: ${{ steps.test_custom_git.outputs.geth_repo }}"
          echo "Geth tag: ${{ steps.test_custom_git.outputs.geth_tag }}"
          [[ "${{ steps.test_custom_git.outputs.geth_repo }}" == "ethereum/go-ethereum" ]] || exit 1
          [[ "${{ steps.test_custom_git.outputs.geth_tag }}" == "v1.13.0" ]] || exit 1

          # Test custom besu version
          echo "Besu repo: ${{ steps.test_custom_git.outputs.besu_repo }}"
          echo "Besu tag: ${{ steps.test_custom_git.outputs.besu_tag }}"
          [[ "${{ steps.test_custom_git.outputs.besu_repo }}" == "hyperledger/besu" ]] || exit 1
          [[ "${{ steps.test_custom_git.outputs.besu_tag }}" == "23.7.0" ]] || exit 1

          # Test custom reth version
          echo "Reth repo: ${{ steps.test_custom_git.outputs.reth_repo }}"
          echo "Reth tag: ${{ steps.test_custom_git.outputs.reth_tag }}"
          [[ "${{ steps.test_custom_git.outputs.reth_repo }}" == "paradigmxyz/reth" ]] || exit 1
          [[ "${{ steps.test_custom_git.outputs.reth_tag }}" == "v0.1.0" ]] || exit 1

          echo "✅ Custom git versions test passed"

  test-custom-docker-images:
    name: Test Custom Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test custom docker images
        uses: ./helpers/client-config
        id: test_custom_docker
        with:
          client_source: docker
          client_images: |
            {
              "geth": "ethereum/client-go:v1.13.0",
              "besu": "hyperledger/besu:23.7.0",
              "reth": "ghcr.io/paradigmxyz/reth:v0.1.0"
            }

      - name: Verify custom docker outputs
        run: |
          echo "Testing custom docker images..."

          # Test custom geth image
          echo "Geth docker registry: ${{ steps.test_custom_docker.outputs.geth_docker_registry }}"
          echo "Geth docker tag: ${{ steps.test_custom_docker.outputs.geth_docker_tag }}"
          [[ "${{ steps.test_custom_docker.outputs.geth_docker_registry }}" == "ethereum/client-go" ]] || exit 1
          [[ "${{ steps.test_custom_docker.outputs.geth_docker_tag }}" == "v1.13.0" ]] || exit 1

          # Test custom besu image
          echo "Besu docker registry: ${{ steps.test_custom_docker.outputs.besu_docker_registry }}"
          echo "Besu docker tag: ${{ steps.test_custom_docker.outputs.besu_docker_tag }}"
          [[ "${{ steps.test_custom_docker.outputs.besu_docker_registry }}" == "hyperledger/besu" ]] || exit 1
          [[ "${{ steps.test_custom_docker.outputs.besu_docker_tag }}" == "23.7.0" ]] || exit 1

          # Test custom reth image
          echo "Reth docker registry: ${{ steps.test_custom_docker.outputs.reth_docker_registry }}"
          echo "Reth docker tag: ${{ steps.test_custom_docker.outputs.reth_docker_tag }}"
          [[ "${{ steps.test_custom_docker.outputs.reth_docker_registry }}" == "ghcr.io/paradigmxyz/reth" ]] || exit 1
          [[ "${{ steps.test_custom_docker.outputs.reth_docker_tag }}" == "v0.1.0" ]] || exit 1

          echo "✅ Custom docker images test passed"

  test-common-client-tag-git:
    name: Test Common Client Tag Override (Git)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test common client tag with git
        uses: ./helpers/client-config
        id: test_common_tag_git
        with:
          client_source: git
          common_client_tag: "v2.0.0"
          client_repos: |
            {
              "geth": "ethereum/go-ethereum@v1.13.0",
              "besu": "hyperledger/besu@23.7.0"
            }

      - name: Verify common tag override git
        run: |
          echo "Testing common client tag override with git..."

          # Test that common tag overrides individual tags
          echo "Geth tag: ${{ steps.test_common_tag_git.outputs.geth_tag }}"
          echo "Besu tag: ${{ steps.test_common_tag_git.outputs.besu_tag }}"
          [[ "${{ steps.test_common_tag_git.outputs.geth_tag }}" == "v2.0.0" ]] || exit 1
          [[ "${{ steps.test_common_tag_git.outputs.besu_tag }}" == "v2.0.0" ]] || exit 1

          # Test that repos are still correct
          echo "Geth repo: ${{ steps.test_common_tag_git.outputs.geth_repo }}"
          echo "Besu repo: ${{ steps.test_common_tag_git.outputs.besu_repo }}"
          [[ "${{ steps.test_common_tag_git.outputs.geth_repo }}" == "ethereum/go-ethereum" ]] || exit 1
          [[ "${{ steps.test_common_tag_git.outputs.besu_repo }}" == "hyperledger/besu" ]] || exit 1

          echo "✅ Common client tag git test passed"

  test-common-client-tag-docker:
    name: Test Common Client Tag Override (Docker)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test common client tag with docker
        uses: ./helpers/client-config
        id: test_common_tag_docker
        with:
          client_source: docker
          common_client_tag: "v2.0.0"
          client_images: |
            {
              "geth": "ethereum/client-go:v1.13.0",
              "besu": "hyperledger/besu:23.7.0"
            }

      - name: Verify common tag override docker
        run: |
          echo "Testing common client tag override with docker..."

          # Test that common tag overrides individual tags
          echo "Geth docker tag: ${{ steps.test_common_tag_docker.outputs.geth_docker_tag }}"
          echo "Besu docker tag: ${{ steps.test_common_tag_docker.outputs.besu_docker_tag }}"
          [[ "${{ steps.test_common_tag_docker.outputs.geth_docker_tag }}" == "v2.0.0" ]] || exit 1
          [[ "${{ steps.test_common_tag_docker.outputs.besu_docker_tag }}" == "v2.0.0" ]] || exit 1

          # Test that registries are still correct
          echo "Geth docker registry: ${{ steps.test_common_tag_docker.outputs.geth_docker_registry }}"
          echo "Besu docker registry: ${{ steps.test_common_tag_docker.outputs.besu_docker_registry }}"
          [[ "${{ steps.test_common_tag_docker.outputs.geth_docker_registry }}" == "ethereum/client-go" ]] || exit 1
          [[ "${{ steps.test_common_tag_docker.outputs.besu_docker_registry }}" == "hyperledger/besu" ]] || exit 1

          echo "✅ Common client tag docker test passed"

  test-client-config-output-git:
    name: Test Client Config YAML Output (Git)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test client config git output
        uses: ./helpers/client-config
        id: test_config_git
        with:
          client_source: git
          goproxy: "https://proxy.golang.org"

      - name: Verify client config git output
        run: |
          echo "Testing client config YAML output for git..."

          # Print the config for debugging
          echo "Client config:"
          echo "${{ steps.test_config_git.outputs.client_config }}"

          # Test that config contains expected elements
          [[ "${{ steps.test_config_git.outputs.client_config }}" == *"client: go-ethereum"* ]] || exit 1
          [[ "${{ steps.test_config_git.outputs.client_config }}" == *"dockerfile: git"* ]] || exit 1
          [[ "${{ steps.test_config_git.outputs.client_config }}" == *"github: ethereum/go-ethereum"* ]] || exit 1
          [[ "${{ steps.test_config_git.outputs.client_config }}" == *"tag: master"* ]] || exit 1
          [[ "${{ steps.test_config_git.outputs.client_config }}" == *"GOPROXY: https://proxy.golang.org"* ]] || exit 1

          echo "✅ Client config git output test passed"

  test-client-config-output-docker:
    name: Test Client Config YAML Output (Docker)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test client config docker output
        uses: ./helpers/client-config
        id: test_config_docker
        with:
          client_source: docker

      - name: Verify client config docker output
        run: |
          echo "Testing client config YAML output for docker..."

          # Print the config for debugging
          echo "Client config:"
          echo "${{ steps.test_config_docker.outputs.client_config }}"

          # Test that config contains expected elements
          [[ "${{ steps.test_config_docker.outputs.client_config }}" == *"client: go-ethereum"* ]] || exit 1
          [[ "${{ steps.test_config_docker.outputs.client_config }}" != *"dockerfile: git"* ]] || exit 1
          [[ "${{ steps.test_config_docker.outputs.client_config }}" == *"baseimage: docker.ethquokkaops.io/dh/ethpandaops/geth"* ]] || exit 1
          [[ "${{ steps.test_config_docker.outputs.client_config }}" == *"tag: master"* ]] || exit 1

          echo "✅ Client config docker output test passed"

  test-invalid-client-source:
    name: Test Invalid Client Source
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test invalid client source
        uses: ./helpers/client-config
        id: test_invalid_source
        with:
          client_source: invalid
        continue-on-error: true

      - name: Verify error handling
        run: |
          echo "Testing invalid client source error handling..."

          # Test should fail with invalid client source
          if [[ "${{ steps.test_invalid_source.outcome }}" == "success" ]]; then
            echo "❌ Expected test to fail with invalid client source"
            exit 1
          fi

          echo "✅ Invalid client source test passed (correctly failed)"

  test-all-clients:
    name: Test All Supported Clients
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test all clients
        uses: ./helpers/client-config
        id: test_all_clients
        with:
          client_source: git

      - name: Verify all client outputs
        run: |
          echo "Testing all supported clients..."

          # Debug: Print the raw JSON to see what's going on
          echo "Raw JSON output:"
          echo "${{ toJson(steps.test_all_clients.outputs) }}"

          # Test all clients have outputs
          clients=("geth" "besu" "reth" "nethermind" "erigon" "nimbusel")

          for client in "${clients[@]}"; do
            repo_var="${client}_repo"
            tag_var="${client}_tag"

            echo "Testing ${client}..."
            echo "Looking for keys: $repo_var, $tag_var"

            # Use direct GitHub Actions context instead of jq
            case $client in
              "geth")
                repo_value="${{ steps.test_all_clients.outputs.geth_repo }}"
                tag_value="${{ steps.test_all_clients.outputs.geth_tag }}"
                ;;
              "besu")
                repo_value="${{ steps.test_all_clients.outputs.besu_repo }}"
                tag_value="${{ steps.test_all_clients.outputs.besu_tag }}"
                ;;
              "reth")
                repo_value="${{ steps.test_all_clients.outputs.reth_repo }}"
                tag_value="${{ steps.test_all_clients.outputs.reth_tag }}"
                ;;
              "nethermind")
                repo_value="${{ steps.test_all_clients.outputs.nethermind_repo }}"
                tag_value="${{ steps.test_all_clients.outputs.nethermind_tag }}"
                ;;
              "erigon")
                repo_value="${{ steps.test_all_clients.outputs.erigon_repo }}"
                tag_value="${{ steps.test_all_clients.outputs.erigon_tag }}"
                ;;
              "nimbusel")
                repo_value="${{ steps.test_all_clients.outputs.nimbusel_repo }}"
                tag_value="${{ steps.test_all_clients.outputs.nimbusel_tag }}"
                ;;
            esac

            if [[ -z "$repo_value" || "$repo_value" == "null" ]]; then
              echo "❌ ${client} repo is missing: '$repo_value'"
              exit 1
            fi

            if [[ -z "$tag_value" || "$tag_value" == "null" ]]; then
              echo "❌ ${client} tag is missing: '$tag_value'"
              exit 1
            fi

            echo "✅ ${client}: ${repo_value}@${tag_value}"
          done

          echo "✅ All clients test passed"
